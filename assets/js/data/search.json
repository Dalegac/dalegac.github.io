[ { "title": "Linux离线安装nvm Nodejs", "url": "/posts/Linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85nvm-Nodejs/", "categories": "Blogging, 环境安装", "tags": "Linux, nvm, Nodejs", "date": "2024-07-18 07:21:00 +0800", "snippet": "Linux 前端CICD环境搭建1. 安装nvm 准备事项下载安装包nvm-0.39.7.tar.gz# step1 /usr/local目录下，新建.nvm文件夹，用于存放nvmcd /usr/localmkdir -p .nvm# step2 解压nvm安装包进.nvm目录tar -zxvf nvm-0.39.7.tar.gz -C .nvm# step3 在/etc/profile文件末尾，配置nvm的环境变量# 如果需要系统所有用户都使用你，建议放在/usr/local目录下vim /etc/profileexport NVM_DIR=&quot;/usr/local/.nvm..." }, { "title": "初识渲染器-创建篇", "url": "/posts/preliminary-understanding-to-render/", "categories": "Blogging, JavaScript", "tags": "JavaScript, Vue, Vuejs设计与实现", "date": "2022-03-26 09:52:00 +0800", "snippet": "1. 前置知识1.1 UI 内容 DOM 元素：例如是 div 标签还是 a 标签。 属性：如 a 标签的 href 属性，再如 id、class 等通用属性。 事件：如 click、keydown 等。 元素的层级结构：DOM 树的层级结构，既有子节点，又有父节点。1.2 UI 的描述方式 模板描述&amp;lt;h1 @click=&quot;handler&quot;&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt; JavaScript 对象描述const title = { //..." }, { "title": "企业级大文件上传", "url": "/posts/enterprise-level-large-file-upload/", "categories": "Blogging, 文件服务", "tags": "Vue, 文件上传", "date": "2021-10-09 07:21:00 +0800", "snippet": "大文件上传一个企业级上传组件,支持的功能： axios.post 体验优化，粘贴，拖拽，进度条 断点续传+秒传，类型判断 web-worker，时间切片，抽样 hash（MD5） 异步任务并发数，切片报错重试 慢启动，碎片清理，其他优化（完成部分）GitHub 地址1. 预备知识1.1 专用工作者线程（web-worker） 专用工作者线程是最简单的 Web 工作者线程，网页中的脚本可以创建专用工作者线程来执行在页面线程之外的其他任务。这样的线程可以与父页面交换信息、发送网络请求、执行文件输入/输出、进行密集计算、处理大量数据，以及实现其他不适合在页面执行线程里做的任务（否..." }, { "title": "深拷贝", "url": "/posts/deepClone/", "categories": "Blogging, JavaScript", "tags": "JavaScript, 深拷贝", "date": "2021-10-05 09:52:00 +0800", "snippet": "1. 需要考虑的问题 基本实现 递归能力 循环引用 考虑问题的全面性 理解 weakmap 的真正意义 多种类型 考虑问题的严谨性 创建各种引用类型的方法，JS API 的熟练程度 准确的判断数据类型，对数据类型的理解程度 通用遍历： 写代码可以考虑性能优化 了解集中遍历的效率 代码抽象能力 拷贝函数： 箭头函数和普通函数的区别 正则表达式熟练程度 2. 实现/* * @A..." }, { "title": "JavaScript数组方法", "url": "/posts/javasript-array-methods/", "categories": "Blogging, JavaScript", "tags": "JavaScript, Array", "date": "2021-09-26 11:16:00 +0800", "snippet": "1. 数组的声明1.1 数组文本使用数组文本是创建 JavaScript 数组最简单的方法。var array-name = [item1, item2, ...];空格和折行并不重要，声明可横跨多行。请不要最后一个元素之后写逗号，比如：var guns = [&quot;AWM&quot;,&quot;98Kar&quot;,&quot;Uzi&quot;,]可能存在跨浏览器兼容性问题。1.2 使用 JavaScript 关键词 new使用 new Array()创建数组//1var cars = new Array(&quot;Saab&quot;, &quot;Volvo&quot..." }, { "title": "发布-订阅模式", "url": "/posts/publish-subscribe-pattern/", "categories": "Blogging, 设计模式", "tags": "设计模式", "date": "2021-09-15 22:45:00 +0800", "snippet": "发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。比如，我们可以订阅 ajax 请求的 error、success 等事件。或者如果想在动画的每一帧完成之后做一些事情，那我们可以订阅一个事件，然后在动画的每一帧完成之后发布这个事件。在异步编程中使用发布—订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。发布—订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。发布—订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不..." }, { "title": "What is Fiber", "url": "/posts/what's-is-fiber/", "categories": "Blogging, React", "tags": "react, fiber", "date": "2021-09-09 17:21:00 +0800", "snippet": "1. 设计理念1.1 React 哲学 我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。他在 Facebook 和 Instagram 上表现优秀。1.1.1 制约快速响应的因素 计算能力——CPU 瓶颈(creating nodes,re-rendering) 网络延迟——IO 瓶颈(data fetching,code splitting)1.1.2 计算能力限制的解决方案————Time Slicing主流浏览器刷新频率为 60Hz，即每（1000ms / 60Hz）16.6ms 浏览器刷新一次。我们知道，JS 可以操作 DO..." } ]
