<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dalegac.github.io/</id><title>Dale</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2024-10-22T17:44:11+08:00</updated> <author> <name>Dale</name> <uri>https://dalegac.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dalegac.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dalegac.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 Dale </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Linux离线安装nvm Nodejs</title><link href="https://dalegac.github.io/posts/Linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85nvm-Nodejs/" rel="alternate" type="text/html" title="Linux离线安装nvm Nodejs" /><published>2024-07-18T07:21:00+08:00</published> <updated>2024-07-18T07:21:00+08:00</updated> <id>https://dalegac.github.io/posts/Linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85nvm-Nodejs/</id> <content src="https://dalegac.github.io/posts/Linux%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85nvm-Nodejs/" /> <author> <name>Dale</name> </author> <category term="Blogging" /> <category term="环境安装" /> <summary> Linux 前端CICD环境搭建 1. 安装nvm 准备事项 下载安装包nvm-0.39.7.tar.gz # step1 /usr/local目录下，新建.nvm文件夹，用于存放nvm cd /usr/local mkdir -p .nvm # step2 解压nvm安装包进.nvm目录 tar -zxvf nvm-0.39.7.tar.gz -C .nvm # step3 在/etc/profile文件末尾，配置nvm的环境变量 # 如果需要系统所有用户都使用你，建议放在/usr/local目录下 vim /etc/profile export NVM_DIR="/usr/local/.nvm/nvm-0.39.7" [ -s "$NVM_DIR/nvm.sh" ] &amp;amp;&amp;amp; \. "$NVM_DIR/nvm.sh" # This loads n... </summary> </entry> <entry><title>初识渲染器-创建篇</title><link href="https://dalegac.github.io/posts/preliminary-understanding-to-render/" rel="alternate" type="text/html" title="初识渲染器-创建篇" /><published>2022-03-26T09:52:00+08:00</published> <updated>2022-03-26T09:52:00+08:00</updated> <id>https://dalegac.github.io/posts/preliminary-understanding-to-render/</id> <content src="https://dalegac.github.io/posts/preliminary-understanding-to-render/" /> <author> <name>Dale</name> </author> <category term="Blogging" /> <category term="JavaScript" /> <summary> 1. 前置知识 1.1 UI 内容 DOM 元素：例如是 div 标签还是 a 标签。 属性：如 a 标签的 href 属性，再如 id、class 等通用属性。 事件：如 click、keydown 等。 元素的层级结构：DOM 树的层级结构，既有子节点，又有父节点。 1.2 UI 的描述方式 模板描述 &amp;lt;h1 @click="handler"&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt; JavaScript 对象描述 const title = { // 标签名称 tag: "h1", // 标签属性 prop: { onClick: handler, }, // 子节点 children: [{ tag: "span" }], }; 相较于模板的... </summary> </entry> <entry><title>企业级大文件上传</title><link href="https://dalegac.github.io/posts/enterprise-level-large-file-upload/" rel="alternate" type="text/html" title="企业级大文件上传" /><published>2021-10-09T07:21:00+08:00</published> <updated>2023-06-24T21:01:43+08:00</updated> <id>https://dalegac.github.io/posts/enterprise-level-large-file-upload/</id> <content src="https://dalegac.github.io/posts/enterprise-level-large-file-upload/" /> <author> <name>Dale</name> </author> <category term="Blogging" /> <category term="文件服务" /> <summary> 大文件上传 一个企业级上传组件,支持的功能： axios.post 体验优化，粘贴，拖拽，进度条 断点续传+秒传，类型判断 web-worker，时间切片，抽样 hash（MD5） 异步任务并发数，切片报错重试 慢启动，碎片清理，其他优化（完成部分） GitHub 地址 1. 预备知识 1.1 专用工作者线程（web-worker） 专用工作者线程是最简单的 Web 工作者线程，网页中的脚本可以创建专用工作者线程来执行在页面线程之外的其他任务。这样的线程可以与父页面交换信息、发送网络请求、执行文件输入/输出、进行密集计算、处理大量数据，以及实现其他不适合在页面执行线程里做的任务（否则会导致页面响应迟钝）。 1.2 慢启动（slow-start） 在慢启动状态，cwnd 的值以一个 MSS 开始并且每当传输的报文段首次被确认就增... </summary> </entry> <entry><title>深拷贝</title><link href="https://dalegac.github.io/posts/deepClone/" rel="alternate" type="text/html" title="深拷贝" /><published>2021-10-05T09:52:00+08:00</published> <updated>2021-10-05T09:52:00+08:00</updated> <id>https://dalegac.github.io/posts/deepClone/</id> <content src="https://dalegac.github.io/posts/deepClone/" /> <author> <name>Dale</name> </author> <category term="Blogging" /> <category term="JavaScript" /> <summary> 1. 需要考虑的问题 基本实现 递归能力 循环引用 考虑问题的全面性 理解 weakmap 的真正意义 多种类型 考虑问题的严谨性 创建各种引用类型的方法，JS API 的熟练程度 准确的判断数据类型，对数据类型的理解程度 通用遍历： 写代码可以考虑性能优化 了解集中遍历的效率 代码抽象能力 拷贝函数： 箭头函数和普通函数的区别 正则表达式熟练程度 2. 实现 /* * @Author: Dalegac * @Date: 2021-09-30 14:28:05 * @LastEditTime... </summary> </entry> <entry><title>JavaScript数组方法</title><link href="https://dalegac.github.io/posts/javasript-array-methods/" rel="alternate" type="text/html" title="JavaScript数组方法" /><published>2021-09-26T11:16:00+08:00</published> <updated>2023-06-21T22:25:14+08:00</updated> <id>https://dalegac.github.io/posts/javasript-array-methods/</id> <content src="https://dalegac.github.io/posts/javasript-array-methods/" /> <author> <name>Dale</name> </author> <category term="Blogging" /> <category term="JavaScript" /> <summary> 1. 数组的声明 1.1 数组文本 使用数组文本是创建 JavaScript 数组最简单的方法。 var array-name = [item1, item2, ...]; 空格和折行并不重要，声明可横跨多行。 请不要最后一个元素之后写逗号，比如： var guns = ["AWM","98Kar","Uzi",] 可能存在跨浏览器兼容性问题。 1.2 使用 JavaScript 关键词 new 使用 new Array()创建数组 //1 var cars = new Array("Saab", "Volvo", "BMW"); //2 var arr = new Array(3) arr[0] = "George" arr[1] = "John" arr[2] = "Thomas" 出于简洁、可读性和执行速度的考虑，请使用第一种方法（数组文本方法）。 ... </summary> </entry> </feed>
